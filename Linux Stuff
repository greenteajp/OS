LOGIN/DAILY SUTFF:
ssh student@10.50.38.82 -Y      (LIN-OPS)   # linop=
xfreerdp /u:student /v:10.50.36.193 /dynamic-resolution +glyph-cache +clipboard   (WIN-OPS)
xfreerdp /u:student /v:10.50.39.203 /dynamic-resolution +glyph-cache +clipboard    (Admin-Station; student:password)
                    File-server (ssh) :10.19.0.3 (andy.dwyer:BurtMacklinFBI)
                    
MINIs.TIRITh is the only sysV          
                    
           
CTFD: http://10.50.22.25:8000/

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY 3: LINUX ESSENTIALS
ctrl alt t = terminal
vim .ssh/config

###Quick box login
Host linops
    HostName 10.50.38.82
    user student
    port 22
chmod 600 .ssh/config
ssh-keygen (enter, enter, enter)
ssh-copy-id linops
ssh linops -> gets you to the linops station w/out authentication
###
vim .bash_aliases
alias sshops='ssh linops -X terminator&'
source .bashrc      ->  then command sshops to pen terminator on that hostname from before
###


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Situational Awareness:
hostname, uname -a; who, whoami/id

sudo -l  ; shows what commnads you can run

w/who, ps-elf ## finds out what is going on
              why/how is things happening?
              what is\in the file of interest?
              
Host Enumeration:
ifconfig / ip addr    ### gets network interfaces and IP addresses and MACS
netstat (-ntlp) / ss (-ntlp)   ### shows network connections of listening ports
          name, tcp ports, listening, ports/process
sudo -l ss -ntlp  ### to see process names, id and file descriptors
              
ip route / route    ### shows where packets will be routed for specific IP dst.
arp / ip neigh    ### displays MAC addresses of devices observed/talked on the network
          Reachable= talked to recently
          Stale= talked to but not known how long ago

sudo iptables -L / nft list tables   ### to view firewall rules
              
        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FILE SYSTEM: https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html
             https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/index.html
/   ##root
/bin (/usr/bin, /usr/local/bin)     ### stores binaries and commands
/sbin (/usr/sbin)     ### stores system binaries
/home     ### default directory for all users
/usr      ### universal system resources; documentation, example files; catch for any files designed to be used on system
/etc      ### everything configurable; system level config files; ssh, bashrc, gnome, cron, 
/var      ### thing that are likely to change, like logs, mail
/boot     ### what happens at boot process, contains .img/build files, grub
/dev      ### special or device files; hardware, stderr/in/out. 
/lib      ### shared library images needed by binaries in /bin and /sbin, like .dlls
/media    ### subdirectories used for mount points for removable media
/mnt      ### permanetly attached storage/filesys
/opt      ### add-on application software packages
/run      ### run time nad variable data, mounted at boot, holds info to that session of boot
/tmp      ### temporary files/persistence
/proc     ### method for handling process, sys info, memory info
/etc/group  
/etc/passwd
/etc/shells


PERMISSIONS:
https://tldp.org/LDP/intro-linux/html/sect_03_04.html
u:user, g:group, o:anybody else    ;rwx
750 student:student

find / -perm /2000 2>/dev/null -exec ls -la {} \;       ### 2000 for guid, 4000 for suid, 1000 for sticky bit

SUID: when the file is executed it is by the user who owns it
EUID: effective uid, real user id so cant edit anything else
SGID: same as suid but for groups
Sticky Bit: removes the ability to delete files unless the user attempting is the owner of the file


MISC COMMANDS:
--help/man
man -k/apropos "keyword for a command you dont know"  ###used when the exact name for command is not known but 
which   ### locates command directory
whereis ### locate the binary, source, and manual page files for a commands


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY 5: LINUX BOOT PROCESS
https://git.cybbh.space/os/public/-/raw/master/os/modules/007_linux_boot_process/pages/linboot1.png
BIOS - MBR - grub - Linux Kernel - init - SysV Init (/sbin/init); executes scripts in Runlevels                   -             Desired login state
UEFI - GTP - grub.efi ----              - Systemd Init (/lib/systemd/systemd); executes *.units in target.units to       -   
                                              -EITHER OR- ^


Interactive shells:
/etc/environment loads after boot, Global variables, delimited by colons. ( global and system wide)
/etc/profile loads after every login, systemwide. enable user customizations. cheack and evaulated /etc/bash.bashrc (global and system wide), when you can screw with all user shells. easy persistence!
/etc/profile.d
$home/.bashrc is for individual user (local), interactive non-login shells ( not needing login, aka read /etc/bash.bashrc and .bashrc) 
.bash_profile also for user, interacttive login-shell, also Standard message logging called .profile





SYSV:
 The machine’s BIOS or boot firmware loads and runs a boot loader.
 The boot loader(“Grub” located in MBR) finds the kernel image on disk, loads it into memory, and starts it.
 The kernel initializes the devices and its drivers. , kernel process is 0. Runs daemon kthread (2)
 The kernel mounts the root filesystem.
 The kernel starts a program called init with a process ID of 1. This point is the user space start., hardodding to execute /sbin/init for backwards compatibility, and/por systemd daemon (pid 1)
 Init sets the rest of the system processes in motion via pre-configured runlevels. Service/process manager
  serial    ### loads everything in order
  scripts   ### ls /etc/rc3.d (rc4, rc5...) S=start K=stop
  inittab   ### cat /etc/inittab config table for init, tells runlevel, finds out what to do  ##3 only works for SYSV                 
                    /sbin/init
                    /etc/init.d   
  /etc/init.d  ##3 shows all the S & K scripts
  ls -l /etc/rc3.d
      scripts that point to files to run , in order of S(start) or K(stop)
  
  runlevel
    0, Halt ### Shutdown the system
    1,Single User ### single user no networkca
    2,Multi-user mode ### multi user no network
    3,mulit-user w/ network
    4,not used, reserved for custom runlevels
    5,mulit-user w/ networking and GUI
    6, reboot
  
  
  
  

 
 VS Systemd:
 
  parallel
  ini-likefiles
  system.conf
  target units  (/etc/systemd/system)		### for services
    0 poweroff.target
    1 rescue.target
    2 multi-user.target ### no network
    3 multi-user.target ### with net
    4 multi-user.target ### unsed, for custom
    5 graphical.target
    6 reboot.target
      default.target is in /lib/systemd/system
        ls -lisa /lib/systemd/system/default.target -> shows def
          units : value=data
          "requires" are .targets                                                                   
          "wants" are .service
          "after" is to test against to see if fails
          "yes" = "sudo systemctl isolate multi-user.target"
        
     ### want and requires will search here and more : https://www.man7.org/linux/man-pages/man5/systemd.unit.5.html
/etc/systemd/system/*     ### user created services; i.e to try and find it ls -l /etc/systemd/system | grep "graphical" 
/usr/lib/systemd/system/* -OR- /lib/systemd/system/*     ### services created by packages maintainers
/run/systemd/generator/*    ###
does not have /etc/inittab


systemctl show
                                  
systemctl list-dependencies graphical.target      ### green is active, white is inactive;
                            <name of target>  
systemctl show -p Wants graphical.target  ### shows the number of wants
systemctl list-units-files	--all   ### all the unit files
systemctl cat graphical.target    ### shows target location
systemctl list-units --all --type service
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GRUB/KERNEL:

lsblk
  what/where disks are in the system
df -h
  shows the location of disks, i.e /dev/vda1 ( number is the partition #, vda is the prefi of the whole disk)=
sudo parted -l
  where is bios, partition table. Info about the disk
 
 
sudo xxd -l 512 -g 1 /dev/vda (terra), shows the hexes
  eb 63, hex representation of hex code instruction for "jump", followed by NOOP(90 00 00 00), 00000060, then 3rd byte
  last 66 bytes make up partition, 4 bytes with 16 bytes, then last 2 for magic number. Last 2 should be 55 aa.


dd if=mbroken  bs=1  count=446 | md5sum
dd if=mbroken  bs=1 skip=392 count=4 | md5sum
dd if=mbroken  bs=1 skip=446 count=16 | md5sum
sudo dd if=/dev/sda of=MBRcopy bs=1 count=512
  makes a DOS/MBR boot sector, of that
sudo xxd MBRcopy to read file
lsmod ### lists kernel modules, extensions that allow kernel to do things it cannot otherwise
          
ls -l /sbin/init
  if /sbin/init -, tells you whats running either systemd or SYSV(init)
  
lsat field is command to be executed
      

b5cffa520ffea9573ca73ce8dad5cc1b
BIOS system using MBR:
    Stage 1 : boot.img located in the first 440 bytes of the MBR loads…
    Stage 1.5 : core.img located in the MBR between the bootstrap and first partition. It loads…
    Stage 2 : /boot/grub/i386-pc/normal.mod which loads the grub menu and then reads
        /boot/grub/grub.cfg Which displays a list of Linux kernels available to load on the system
UEFI Systems using GPT:
    Stage 1 : grubx64.efi Located on an EFI partition or in /boot loads…
    Stage 2 : /boot/grub/x86_64-efi/normal.mod
        /boot/grub/grub.cfg Which displays a list of4279170e3936e5008b72a1e0c2e3d3ed Linux kernels available to load on the system

cat /boot/grub/grub.cfg
  linux   /boot/vmlinuz-4.15.0-76-generic      ### contains the Linux Kernel
  initrd  /boot/initrd.img-4.15.0-76-generic






cat /etc/inittab | grep "default"





egrep '^([0-9A-Fa-f][0,2,4,6,8,A,C,E][:-])([0-9A-Fa-f]{2}[:-]){4}([0-9A-Fa-f]{2})$' numbers  | wc -l
grep -vofF
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY8: LINUX PROCESS VALIDITY

two primary process after startup:
kernel-space processes [kthreadd] (pid 2)
  kernel processes are fork()ed from kthread
   process in [], have a ppid of 2, thus kernel processes
   -access to everything, has separate memory space. can crash if process is abruptly killed

user-space processes /sbin/init (pid 2)
  user processes are fork()ed from /sbin/init
  -restricted to a subset of memeory sand safe cpu operations
 
view processes:
ps -elf,static ; long listings, everything,
ps -Nlf --ppid 2 ; everything that does not have a ppid of 2 ( ie kernel processes)
                  --forest ; process tree from child to parent, follows ppid to pid
                           | grep -B/A 8 ps     ; specifiy before/after a number of  lines
                                    --context 8 ps  ; before and after
top,dynamic
load average; numbers represent minutes, first last 1, second last 5, third last 15
            ; tells if system if being heavily loaded and in what time
   'f' key; fields mgmt         
   'shift v' key; tree view
   
htop; better 'top'
  'f5' key, tree
  'f2' key, options, etc.


Proc ownership,euid,ruid:
  effective user Id (euid): defines access rights for a process
    second uid, ruid, indicates who initiated a proc
   
  real user Id(ruid): who you really are. the user that can interact w/ running process-most significantly, 
    which user can kill and send signals to a proc

IE, I'm student (ruid) running a thing as root(euid)
  users can only modify /interact with files /process that they own or have been shared with them


SYSTEM CALLS:
other sys calls: read, write, close, wait, kill

fork(): kernel creates nearly identical copy of the process
exec(): kernel starts program, replacing current process.
    shell -> fork() -> shell
                    -> copy of shell -> exec(ls) -> ls


ORPHAN AND ZOMBIE PROC:
orphan; process that lost its parent proc
      ; systemd or init adopts orphan proc
      ; all daemons(background proc) are orphans, not every orphan is a daemon
      disown -a && exit ## close a shell/terminal and force all children to be adopted

zombie; completed proc, still has a entry in a proc table, waiting for termination from parent
      ; no resources are used but occupies proc table
      ; cant be 'killed' until parent says so
fork bomb; dos attack, continually replicates itself to deplete sys resources

in ps -elf:'S' field, s sleeping, r running, z zombie ( or defunct proc)
                
daemons; background process and services
       ; man cron ( daemon)
  systemctl - systemd			
  rc.d - system v
      ps --ppid 1 -lf; long listing and format of processes that has a ppid of 1 (orphan process!!!)
                     ; if malicious proc is disguised as daemon look here         


JOBS CONTROL:
  'jobs'; display list of jobs running in bg
  'fg' or 'bg', pull/push jobs to/from forground/background
  'kill -l', shows all the signals you can run
  'kill %<job number>'; terminate proc by job number
  kill -19; stop /suspend the job
  'kill -9 <PID>' or 'pkill -9 <process name>'
  stop proc = SIGSTOP(19), pause signal, not kill
  end proc = SIGTERM(15),termination signal the right way. wont iniates shutdown tasks
  kill proc = SIGKILL(9), kill signal, extreme, only use if sigterm doesnt work, wont iniate shutdown tasks
  

CRON JOBS:
  sudo systemctl list-units --all --type timer/mount/service
  cron daemon checks: /var/spool/cron, /etc/cron.d, /etc/crontab 
  two types:
    sys con jobs:
        runs as root
        sys-wide maintenance tasks
        controlled by /etc/crontab
        also in /etc/cron.d
    user cron jobs:
        use 'crontab' command to create cron jobs
        stored in /var/spool/con/crontabs/<user> -location
     
    crontab -u [user] file This command will load the crontab data from the specified file
    crontab -l -u [user] This command will display/list user’s crontab contents		### need root priv
    crontab -r -u [user] This Command will remove user’s crontab contents
    <sudo> crontab -e -u [user] This command will edit user’s crontab contents
	#crontab jobs run with the permissions of the owner of the crontab file
	
	
	
EX:
        * * * * * /directory/and/command
| | | | |
| | | | +---- Day of the Week   (range: 0-7, 1 = Monday) 0/7 is sunday
| | | +------ Month of the Year (range: 1-12)
| | +-------- Day of the Month  (range: 1-31)
| +---------- Hour              (range: 0-23)
+------------ Minute            (range: 0-59)
        
        ────────── minute (0 - 59)
  │ ┌───────────── hour (0 - 23)
  │ │ ┌───────────── day of the month (1 - 31)
  │ │ │ ┌───────────── month (1 - 12)
  │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
  │ │ │ │ │                           7 is also Sunday on some systems)
  │ │ │ │ │
  │ │ │ │ │
  * * * * * <Time/Day to execute    "Command to Execute"
        
    EX:
    ** `12 4 * * *`    /usr/bin/backup
    ** `0 0-5,21-23 * * *`    echo $(ss -nltp) >> /home/andy.dwyer/tcplist.context



PROCESSES AND PROC DIR:
sudo !!
sudo lsof | tail -30 ;list all open files being used by every process
sudo lsof -c sshd ; for a specific process

ls /proc/<ID#>, to see for that process
sudo lsof -p <#>

Grab the PID of a process.
    ps -elf | grep sshd

List all the proc directories.
    ls -l /proc/

List contents for that PID directory.
    sudo ls -l /proc/14139

file descriptors: 0,1,2, stout, in, err. ++ is just files
			r read, w write, u read and write





----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY 10: LINUX Auditing & Logging:
https://jqplay.org/

syslog							
RFC 5424	log-rotation
text-based
universal across Unix-like
default

journald
system module
binary files
read w/ journalctl
can output in various formats

pros: main sys crashes or compromised logs are still available through remote logging.
      historical analysis, record of anomalous activity, disagnostics of a failure
      
cons: loggin to much/little, not free, can be cryptic, not analyzing them, time normalization.


LOG TYPES:
    Authentication			(last -f)
        /var/log/auth.log - Authentication related events		
			### when a password is accepted (also public key), like through ssh. pam-unix, systemd-logind; exists until close pam and logind
        		### 'su' indicates changing user,
	/var/run/utmp - Users currently logged in	### for that session
        /var/log/wtmp - History file for utmp
        /var/log/btmp - Failed login attempts

    Application		## any installations of apps, web server logs,
        apache - Web Server (dir)
        apt - Package Manager (dir)
        /var/log/mysql.log



    System
        /var/log/messages - Legacy Catch all
		### SysV
        /var/log/syslog - Ubuntu/Debian Catch all
		### Sys
        dmesg = Device Messenger (queires /proc/kmsg)
            Kernel Ring Buffer - Never fills
            First logs generated by the system



    Logging At A Glance
    	Location : /var/log			### most of logs here
    	Config File : /etc/rsyslog.conf		### sysV
    	***** Service : /usr/sbin/rsyslogd		
		### both sysV and systemd, logging daemon
		### reads messages written to /dev/lpog, then formats/stores them based on /etc/rsyslog.conf
		### auditd
		###syslog() via libc
	/etc/rsyslog.conf				
		### '@' = UDP, '@@' = TCP, for sockets(IP:Port)
		### *.info ; means all severity from info AND HIGHER
		### !.info = means everything but info
		### syslog standard, facility.severity
	### FACILITY= what program, or part of sys, log is from
0   kernel messages
1   user-level messages
2   mail system
3   system daemons
4   security/authorization messages
5   messages generated internally by syslogd
6   line printer subsystem
7   network news subsystem
8   UUCP subsystem
9   clock daemon
10  security/authorization messages
11  FTP daemon
12  NTP subsystem13|log audit
	### SEVERITY= URGENCY
0  emerg, panic:  Emergency: system is unusable
1  alert:         Action must be taken immediately
2  crit:          Critical conditions
3  err, error:    Error conditions
4  warn, warning: Warning conditions
5  notice:        Normal but significant condition
6  info:          Informational messages
7  Debug:         Debug-level messages



Log Enumeration / Management
Utilize cron jobs / scripts
    logrotate
        /etc/logrotate.conf

Journald Logs:
	systemd-journald.service
	journalctl -e ### shows last log received
		   --list-boots
	 	   -b <bootid>
		   -u ssh.service
		   -u ssh.service --since "2 days ago"
		   
		 

Useful Logging Commands
    tail -f - Continuously show end of file
    less /var/log/syslog - View Log in page viewer
    logger - Send a user generated message to system Log i.e. Starting Update
    > /var/log/messages - Wipes Logs
        Why do this as opposed to deleting/recreating files?
    last -f /var/log{wtmp,btmp} - Needed to view data files


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY11: MEMEORY ANALYSIS

Volatile Memory
    Non-persistent
    Requires power to maintain the stored information; it retains its contents while powered on but when the power is interrupted, the stored data is immediately lost
        RAM
Non-Volatile Memory
    Persistent
    Does not require a continuous power supply to retain the data stored in a computing device
        HDD
        USB

Why is this important?
    Data that has not been stored on disk yet is present in memory
    Files that have been deleted or modified can be scraped from RAM and used as evidence or for timelining an attack
        Examples:
            Bash history is written to .bash_history once the terminal session is terminated, however each command that has been ran during the current terminal session resides in RAM and can be viewed using the bash plugin
            If the ~/.bash_history has been deleted, using the same method as above we can still retrieve all commands executed
            Logs that have been deleted or modified can be read and scraped from memory using the mfind mcat & mls plugins



Order of Volatility -Halflife of data
    1 CPU registers, cache
    2 Routing table, ARP cache, process table, kernel stats, memory
    3 Temporary file systems
    4 Disk
    5 Remote logging and monitoring data
    6 Physical configuration, network topology
    7 Archival media - backups


Vaolatility ( program):
    Memory Analysis framework
    Volatility provides cross-platform solutions on Windows, Mac OSX, and Linux
    Each operating system has its own memory acquisition tool called Persistent Memory (pmem)
        Linpmem
        Winpmem
        OSXpmem
COMMANDS
findstr /i
plugins: 
	memdump,procdump,
	network artifacts: connections, connscan(gives recently active and closed),
	dlllist( gives dlls for a process), dlldump grabs it and send it to file on workstation via '-D .')
	looking for processes: pslist, pstree, pscan( gives physical memory address of process)
	registry analysis: hivedump ( dumps entire hive),hivelist,dumpregistry 
Ex.
.\volatility_2.6_win64_standalone.exe -h			### gets all the parameters, and plugins
.\volatility_2.6_win64_standalone.exe -f ".\cridex.vmem" --=WinXPSP2x86 pstree
.\volatility_2.6_win64_standalone.exe -f ".\cridex.vmem" --profile=WinXPSP2x86 procdump -p 1640 -D .
		makes a copy of the process and saves it in pwd
get-filehash -Algorithm md5 .\executable.1640.exec
		get hash and comapre it to Virustotal.com

.\volatility_2.6_win64_standalone.exe -f ".\cridex.vmem" --profile=WinXPSP2x86 memdump -p 1640 -D .
		
										net use * \\live.sysinternals.com\tools, dont have to change directories to use syinternal tools
													z:\strings64.exe....
							z:\strings.exe -accepteula ".\1640.dmp" > 1640.txt ( use with notepad++); regegx for IPs, etc...


